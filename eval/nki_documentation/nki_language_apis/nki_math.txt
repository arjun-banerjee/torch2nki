-----
nki.language.add

Signature:
nki.language.add(x, y, *, dtype=None, mask=None, **kwargs)

Description:
Add the inputs, element-wise.
((Similar to numpy.add))

Parameters:
x – a tile or a scalar value.
y – a tile or a scalar value. x.shape and y.shape must be broadcastable to a common shape, that will become the shape of the output.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tiles, or whichever input type has the highest precision (see NKI Type Promotion for more information);
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has x + y, element-wise.

Example:
import neuronxcc.nki.language as nl

a = nl.load(a_tensor[0:128, 0:512])
b = nl.load(b_tensor[0:128, 0:512])
# add a and b element-wise and store in c[128, 512]
c = nl.add(a, b)
nl.store(c_tensor[0:128, 0:512], c)

a = nl.load(a_tensor[0:128, 0:512])
b = 2.2
# add constant b to each element in a
c = nl.add(a, b)
nl.store(c_tensor[0:128, 0:512], c)

a = nl.load(a_tensor[0:128, 0:512])
b = nl.load(b_tensor[0:128, 0:1])
# broadcast on free dimension -- [128, 1] is broadcasted to [128, 512]
c = nl.add(a, b)
nl.store(c_tensor[0:128, 0:512], c)

a = nl.load(a_tensor[0:128, 0:512])
b = nl.load(b_tensor[0:1, 0:512])
# broadcast on partition dimension -- [1, 512] is broadcasted to [128, 512]
c = nl.add(a, b)
nl.store(c_tensor[0:128, 0:512], c)

a = nl.load(a_tensor[0:128, 0:512])
b = nl.load(b_tensor[0:1, 0:1])
# broadcast on both dimensions -- [1, 1] is broadcasted to [128, 512]
c = nl.add(a, b)
nl.store(c_tensor[0:128, 0:512], c)

a = nl.load(a_tensor[0:128, 0:1])
b = nl.load(b_tensor[0:1, 0:512])
# broadcast on each dimensions -- [128, 1] and [1, 512] are broadcasted to [128, 512]
c = nl.add(a, b)
nl.store(c_tensor[0:128, 0:512], c)

Note:
Broadcasting in the partition dimension is generally more expensive than broadcasting in free dimension. It is recommended to align your data to perform free dimension broadcast whenever possible.
-----
nki.language.subtract

Signature:
nki.language.subtract(x, y, *, dtype=None, mask=None, **kwargs)

Description:
Subtract the inputs, element-wise.
((Similar to numpy.subtract))

Parameters:
x – a tile or a scalar value.
y – a tile or a scalar value. x.shape and y.shape must be broadcastable to a common shape, that will become the shape of the output.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tiles, or whichever input type has the highest precision (see NKI Type Promotion for more information);
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has x - y, element-wise.
-----
nki.language.multiply

Signature:
nki.language.multiply(x, y, *, dtype=None, mask=None, **kwargs)

Description:
Multiply the inputs, element-wise.
((Similar to numpy.multiply))

Parameters:
x – a tile or a scalar value.
y – a tile or a scalar value. x.shape and y.shape must be broadcastable to a common shape, that will become the shape of the output.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tiles, or whichever input type has the highest precision (see NKI Type Promotion for more information);
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has x * y, element-wise.
-----
nki.language.divide

Signature:
nki.language.divide(x, y, *, dtype=None, mask=None, **kwargs)

Description:
Divide the inputs, element-wise.
((Similar to numpy.divide))

Parameters:
x – a tile or a scalar value.
y – a tile or a scalar value. x.shape and y.shape must be broadcastable to a common shape, that will become the shape of the output.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tiles, or whichever input type has the highest precision (see NKI Type Promotion for more information);
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has x / y, element-wise.
-----
nki.language.power

Signature:
nki.language.power(x, y, *, dtype=None, mask=None, **kwargs)

Description:
Elements of x raised to powers of y, element-wise.
((Similar to numpy.power))

Parameters:
x – a tile or a scalar value.
y – a tile or a scalar value. x.shape and y.shape must be broadcastable to a common shape, that will become the shape of the output.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tiles, or whichever input type has the highest precision (see NKI Type Promotion for more information);
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has values x to the power of y.
-----
nki.language.maximum

Signature:
nki.language.maximum(x, y, *, dtype=None, mask=None, **kwargs)

Description:
Maximum of the inputs, element-wise.
((Similar to numpy.maximum))

Parameters:
x – a tile or a scalar value.
y – a tile or a scalar value. x.shape and y.shape must be broadcastable to a common shape, that will become the shape of the output.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tiles, or whichever input type has the highest precision (see NKI Type Promotion for more information);
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has the maximum of each elements from x and y.
-----
nki.language.minimum

Signature:
nki.language.minimum(x, y, *, dtype=None, mask=None, **kwargs)

Description:
Minimum of the inputs, element-wise.
((Similar to numpy.minimum))

Parameters:
x – a tile or a scalar value.
y – a tile or a scalar value. x.shape and y.shape must be broadcastable to a common shape, that will become the shape of the output.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tiles, or whichever input type has the highest precision (see NKI Type Promotion for more information);
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has the minimum of each elements from x and y.
-----
nki.language.max

Signature:
nki.language.max(x, axis, *, dtype=None, mask=None, keepdims=False, **kwargs)

Description:
Maximum of elements along the specified axis (or axes) of the input.
((Similar to numpy.max))

Parameters:
x – a tile.
axis – int or tuple/list of ints. The axis (or axes) along which to operate; must be free dimensions, not partition dimension (0); can only be the last contiguous dim(s) of the tile: [1], [1,2], [1,2,3], [1,2,3,4]
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)
keepdims – If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.

Returns:
a tile with the maximum of elements along the provided axis. This return tile will have a shape of the input tile’s shape with the specified axes removed.
-----
nki.language.min

Signature:
nki.language.min(x, axis, *, dtype=None, mask=None, keepdims=False, **kwargs)

Description:
Minimum of elements along the specified axis (or axes) of the input.
((Similar to numpy.min))

Parameters:
x – a tile.
axis – int or tuple/list of ints. The axis (or axes) along which to operate; must be free dimensions, not partition dimension (0); can only be the last contiguous dim(s) of the tile: [1], [1,2], [1,2,3], [1,2,3,4]
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)
keepdims – If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.

Returns:
a tile with the minimum of elements along the provided axis. This return tile will have a shape of the input tile’s shape with the specified axes removed.
-----
nki.language.mean

Signature:
nki.language.mean(x, axis, *, dtype=None, mask=None, keepdims=False, **kwargs)

Description:
Arithmetic mean along the specified axis (or axes) of the input.
((Similar to numpy.mean))

Parameters:
x – a tile.
axis – int or tuple/list of ints. The axis (or axes) along which to operate; must be free dimensions, not partition dimension (0); can only be the last contiguous dim(s) of the tile: [1], [1,2], [1,2,3], [1,2,3,4]
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile with the average of elements along the provided axis. This return tile will have a shape of the input tile’s shape with the specified axes removed. float32 intermediate and return values are used for integer inputs.
-----
nki.language.var

Signature:
nki.language.var(x, axis, *, dtype=None, mask=None, **kwargs)

Description:
Variance along the specified axis (or axes) of the input.
((Similar to numpy.var))

Parameters:
x – a tile.
axis – int or tuple/list of ints. The axis (or axes) along which to operate; must be free dimensions, not partition dimension (0); can only be the last contiguous dim(s) of the tile: [1], [1,2], [1,2,3], [1,2,3,4]
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile with the variance of the elements along the provided axis. This return tile will have a shape of the input tile’s shape with the specified axes removed.
-----
nki.language.sum

Signature:
nki.language.sum(x, axis, *, dtype=None, mask=None, keepdims=False, **kwargs)

Description:
Sum of elements along the specified axis (or axes) of the input.
((Similar to numpy.sum))

Parameters:
x – a tile.
axis – int or tuple/list of ints. The axis (or axes) along which to operate; must be free dimensions, not partition dimension (0); can only be the last contiguous dim(s) of the tile: [1], [1,2], [1,2,3], [1,2,3,4]
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)
keepdims – If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.

Returns:
a tile with the sum of elements along the provided axis. This return tile will have a shape of the input tile’s shape with the specified axes removed.
-----
nki.language.prod

Signature:
nki.language.prod(x, axis, *, dtype=None, mask=None, keepdims=False, **kwargs)

Description:
Product of elements along the specified axis (or axes) of the input.
((Similar to numpy.prod))

Parameters:
x – a tile.
axis – int or tuple/list of ints. The axis (or axes) along which to operate; must be free dimensions, not partition dimension (0); can only be the last contiguous dim(s) of the tile: [1], [1,2], [1,2,3], [1,2,3,4]
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)
keepdims – If this is set to True, the axes which are reduced are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array.

Returns:
a tile with the product of elements along the provided axis. This return tile will have a shape of the input tile’s shape with the specified axes removed.
-----
nki.language.all

Signature:
nki.language.all(x, axis, *, dtype=<class 'bool'>, mask=None, **kwargs)

Description:
Whether all elements along the specified axis (or axes) evaluate to True.
((Similar to numpy.all))

Parameters:
x – a tile.
axis – int or tuple/list of ints. The axis (or axes) along which to operate; must be free dimensions, not partition dimension (0); can only be the last contiguous dim(s) of the tile: [1], [1,2], [1,2,3], [1,2,3,4]
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a boolean tile with the result. This return tile will have a shape of the input tile’s shape with the specified axes removed.
-----
nki.language.abs

Signature:
nki.language.abs(x, *, dtype=None, mask=None, **kwargs)

Description:
Absolute value of the input, element-wise.

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has absolute values of x.
-----
nki.language.negative

Signature:
nki.language.negative(x, *, dtype=None, mask=None, **kwargs)

Description:
Numerical negative of the input, element-wise.
((Similar to numpy.negative))

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has numerical negative values of x.
-----
nki.language.sign

Signature:
nki.language.sign(x, *, dtype=None, mask=None, **kwargs)

Description:
Sign of the numbers of the input, element-wise.
((Similar to numpy.sign))
The sign function returns -1 if x < 0, 0 if x==0, 1 if x > 0.

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has sign values of x.
-----
nki.language.trunc

Signature:
nki.language.trunc(x, *, dtype=None, mask=None, **kwargs)

Description:
Truncated value of the input, element-wise.
((Similar to numpy.trunc))
The truncated value of the scalar x is the nearest integer i which is closer to zero than x is. In short, the fractional part of the signed number x is discarded.

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has truncated values of x.
-----
nki.language.floor

Signature:
nki.language.floor(x, *, dtype=None, mask=None, **kwargs)

Description:
Floor of the input, element-wise.
((Similar to numpy.floor))
The floor of the scalar x is the largest integer i, such that i <= x.

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has floor values of x.
-----
nki.language.ceil

Signature:
nki.language.ceil(x, *, dtype=None, mask=None, **kwargs)

Description:
Ceiling of the input, element-wise.
((Similar to numpy.ceil))
The ceil of the scalar x is the smallest integer i, such that i >= x.

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has ceiling values of x.
-----
nki.language.exp

Signature:
nki.language.exp(x, *, dtype=None, mask=None, **kwargs)

Description:
Exponential of the input, element-wise.
((Similar to numpy.exp))
The exp(x) is e^x where e is the Euler’s number = 2.718281…

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has exponential values of x.
-----
nki.language.log

Signature:
nki.language.log(x, *, dtype=None, mask=None, **kwargs)

Description:
Natural logarithm of the input, element-wise.
((Similar to numpy.log))
It is the inverse of the exponential function, such that: log(exp(x)) = x . The natural logarithm base is e.

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has natural logarithm values of x.
-----
nki.language.cos

Signature:
nki.language.cos(x, *, dtype=None, mask=None, **kwargs)

Description:
Cosine of the input, element-wise.
((Similar to numpy.cos))

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has cosine values of x.
-----
nki.language.sin

Signature:
nki.language.sin(x, *, dtype=None, mask=None, **kwargs)

Description:
Sine of the input, element-wise.
((Similar to numpy.sin))

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has sine values of x.
-----
nki.language.tan

Signature:
nki.language.tan(x, *, dtype=None, mask=None, **kwargs)

Description:
Tangent of the input, element-wise.
((Similar to numpy.tan))

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has tangent values of x.
-----
nki.language.tanh

Signature:
nki.language.tanh(x, *, dtype=None, mask=None, **kwargs)

Description:
Hyperbolic tangent of the input, element-wise.
((Similar to numpy.tanh))

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has hyperbolic tangent values of x.
-----
nki.language.arctan

Signature:
nki.language.arctan(x, *, dtype=None, mask=None, **kwargs)

Description:
Inverse tangent of the input, element-wise.
((Similar to numpy.arctan))

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has inverse tangent values of x.
-----
nki.language.sqrt

Signature:
nki.language.sqrt(x, *, dtype=None, mask=None, **kwargs)

Description:
Non-negative square-root of the input, element-wise.
((Similar to numpy.sqrt))

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has square-root values of x.
-----
nki.language.rsqrt

Signature:
nki.language.rsqrt(x, *, dtype=None, mask=None, **kwargs)

Description:
Reciprocal of the square-root of the input, element-wise.
((Similar to torch.rsqrt))
rsqrt(x) = 1 / sqrt(x)

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has reciprocal square-root values of x.
-----
nki.language.sigmoid

Signature:
nki.language.sigmoid(x, *, dtype=None, mask=None, **kwargs)

Description:
Logistic sigmoid activation function on the input, element-wise.
((Similar to torch.nn.functional.sigmoid))
sigmoid(x) = 1/(1+exp(-x))

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has sigmoid of x.
-----
nki.language.relu

Signature:
nki.language.relu(x, *, dtype=None, mask=None, **kwargs)

Description:
Rectified Linear Unit activation function on the input, element-wise.
relu(x) = (x)+ = max(0,x)
((Similar to torch.nn.functional.relu))

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has relu of x.
-----
nki.language.gelu

Signature:
nki.language.gelu(x, *, dtype=None, mask=None, **kwargs)

Description:
Gaussian Error Linear Unit activation function on the input, element-wise.
((Similar to torch.nn.functional.gelu))

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has gelu of x.
-----
nki.language.gelu_dx

Signature:
nki.language.gelu_dx(x, *, dtype=None, mask=None, **kwargs)

Description:
Derivative of Gaussian Error Linear Unit (gelu) on the input, element-wise.

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has gelu_dx of x.
-----
nki.language.gelu_apprx_tanh

Signature:
nki.language.gelu_apprx_tanh(x, *, dtype=None, mask=None, **kwargs)

Description:
Gaussian Error Linear Unit activation function on the input, element-wise, with tanh approximation.

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has gelu of x.
-----
nki.language.silu

Signature:
nki.language.silu(x, *, dtype=None, mask=None, **kwargs)

Description:
Sigmoid Linear Unit activation function on the input, element-wise.
((Similar to torch.nn.functional.silu))

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has silu of x.
-----
nki.language.silu_dx

Signature:
nki.language.silu_dx(x, *, dtype=None, mask=None, **kwargs)

Description:
Derivative of Sigmoid Linear Unit activation function on the input, element-wise.

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has silu_dx of x.
-----
nki.language.erf

Signature:
nki.language.erf(x, *, dtype=None, mask=None, **kwargs)

Description:
Error function of the input, element-wise.
((Similar to torch.erf))
erf(x) = 2/sqrt(pi)*integral(exp(-t**2), t=0..x) .

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has erf of x.
-----
nki.language.erf_dx

Signature:
nki.language.erf_dx(x, *, dtype=None, mask=None, **kwargs)

Description:
Derivative of the Error function (erf) on the input, element-wise.

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has erf_dx of x.
-----
nki.language.softplus

Signature:
nki.language.softplus(x, *, dtype=None, mask=None, **kwargs)

Description:
Softplus activation function on the input, element-wise.
Softplus is a smooth approximation to the ReLU activation, defined as:
softplus(x) = log(1 + exp(x))

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has softplus of x.
-----
nki.language.mish

Signature:
nki.language.mish(x, *, dtype=None, mask=None, **kwargs)

Description:
Mish activation function on the input, element-wise.
Mish: A Self Regularized Non-Monotonic Neural Activation Function is defined as:
see: https://arxiv.org/abs/1908.08681

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has mish of x.
-----
nki.language.square

Signature:
nki.language.square(x, *, dtype=None, mask=None, **kwargs)

Description:
Square of the input, element-wise.
((Similar to numpy.square))

Parameters:
x – a tile.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has square of x.
-----
nki.language.softmax

Signature:
nki.language.softmax(x, axis, *, dtype=None, compute_dtype=None, mask=None, **kwargs)

Description:
Softmax activation function on the input, element-wise.
((Similar to torch.nn.functional.softmax))

Parameters:
x – a tile.
axis – int or tuple/list of ints. The axis (or axes) along which to operate; must be free dimensions, not partition dimension (0); can only be the last contiguous dim(s) of the tile: [1], [1,2], [1,2,3], [1,2,3,4]
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
compute_dtype – (optional) dtype for the internal computation - currently `dtype` and `compute_dtype` behave the same, both sets internal compute and return dtype.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has softmax of x.
-----
nki.language.rms_norm

Signature:
nki.language.rms_norm(x, w, axis, n, epsilon=1e-06, *, dtype=None, compute_dtype=None, mask=None, **kwargs)

Description:
Apply Root Mean Square Layer Normalization.

Parameters:
x – input tile
w – weight tile
axis – axis along which to compute the root mean square (rms) value
n – total number of values to calculate rms
epsilon – epsilon value used by rms calculation to avoid divide-by-zero
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
compute_dtype – (optional) dtype for the internal computation - currently `dtype` and `compute_dtype` behave the same, both sets internal compute and return dtype.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
`` x / RMS(x) * w ``
-----
nki.language.dropout

Signature:
nki.language.dropout(x, rate, *, dtype=None, mask=None, **kwargs)

Description:
Randomly zeroes some of the elements of the input tile given a probability rate.

Parameters:
x – a tile.
rate – a scalar value or a tile with 1 element, with the probability rate.
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile with randomly zeroed elements of x.
-----
nki.language.matmul

Signature:
nki.language.matmul(x, y, *, transpose_x=False, mask=None, **kwargs)

Description:
x @ y matrix multiplication of x and y.
((Similar to numpy.matmul))
Note
For optimal performance on hardware, use nki.isa.nc_matmul() or call nki.language.matmul with transpose_x=True. Use nki.isa.nc_matmul also to access low-level features of the Tensor Engine.
Note
Implementation details: nki.language.matmul calls nki.isa.nc_matmul under the hood. nc_matmul is neuron specific customized implementation of matmul that computes x.T @ y, as a result, matmul(x, y) lowers to nc_matmul(transpose(x), y). To avoid this extra transpose instruction being inserted, use x.T and transpose_x=True inputs to this matmul.

Parameters:
x – a tile on SBUF (partition dimension <= 128, free dimension <= 128), x’s free dimension must match y’s partition dimension.
y – a tile on SBUF (partition dimension <= 128, free dimension <= 512)
transpose_x – Defaults to False. If True, x is treated as already transposed. If False, an additional transpose will be inserted to make x’s partition dimension the contract dimension of the matmul to align with the Tensor Engine.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
x @ y or x.T @ y if transpose_x=True
-----
nki.language.transpose

Signature:
nki.language.transpose(x, *, dtype=None, mask=None, **kwargs)

Description:
Transposes a 2D tile between its partition and free dimension.

Parameters:
x – 2D input tile
dtype – (optional) data type to cast the output type to (see Supported Data Types for more information); if not specified, it will default to be the same as the data type of the input tile.
mask – (optional) a compile-time constant predicate that controls whether/how this instruction is executed (see NKI API Masking for details)

Returns:
a tile that has the values of the input tile with its partition and free dimensions swapped.
